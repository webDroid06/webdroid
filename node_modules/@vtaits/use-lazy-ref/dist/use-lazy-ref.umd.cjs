(function(global, factory) {
  typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require("react")) : typeof define === "function" && define.amd ? define(["exports", "react"], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, factory(global.uzeLazyRef = {}, global.React));
})(this, function(exports2, react) {
  "use strict";
  const EMPTY_VALUE = Symbol("useLazyRef empty value");
  const useLazyRef = (init) => {
    const resultRef = react.useRef(EMPTY_VALUE);
    if (resultRef.current === EMPTY_VALUE) {
      resultRef.current = init();
    }
    return resultRef;
  };
  exports2.EMPTY_VALUE = EMPTY_VALUE;
  exports2.useLazyRef = useLazyRef;
  Object.defineProperties(exports2, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
});
