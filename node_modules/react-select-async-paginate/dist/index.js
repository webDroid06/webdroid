"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AsyncPaginate: () => AsyncPaginate,
  checkIsResponse: () => checkIsResponse,
  reduceGroupedOptions: () => reduceGroupedOptions,
  useAsyncPaginate: () => useAsyncPaginate,
  useAsyncPaginateBase: () => useAsyncPaginateBase,
  useComponents: () => useComponents,
  validateResponse: () => validateResponse,
  withAsyncPaginate: () => withAsyncPaginate,
  wrapMenuList: () => wrapMenuList
});
module.exports = __toCommonJS(src_exports);
var import_react_select2 = __toESM(require("react-select"));

// src/useAsyncPaginate.ts
var import_react2 = require("react");

// src/useAsyncPaginateBase.ts
var import_react = require("react");
var import_use_is_mounted_ref = __toESM(require("use-is-mounted-ref"));
var import_use_lazy_ref = require("@vtaits/use-lazy-ref");

// src/getInitialCache.ts
var getInitialCache = (params) => ({
  isFirstLoad: true,
  options: [],
  hasMore: true,
  isLoading: false,
  additional: params.additional
});

// src/getInitialOptionsCache.ts
var getInitialOptionsCache = ({
  options,
  defaultOptions,
  additional,
  defaultAdditional
}) => {
  const initialOptions = defaultOptions === true ? null : defaultOptions instanceof Array ? defaultOptions : options;
  if (initialOptions) {
    return {
      "": {
        isFirstLoad: false,
        isLoading: false,
        options: initialOptions,
        hasMore: true,
        additional: defaultAdditional || additional
      }
    };
  }
  return {};
};

// src/defaultShouldLoadMore.ts
var AVAILABLE_DELTA = 10;
var defaultShouldLoadMore = (scrollHeight, clientHeight, scrollTop) => {
  const bottomBorder = scrollHeight - clientHeight - AVAILABLE_DELTA;
  return bottomBorder < scrollTop;
};

// src/defaultReduceOptions.ts
var defaultReduceOptions = (prevOptions, loadedOptions) => [...prevOptions, ...loadedOptions];

// src/requestOptions.ts
var import_sleep_promise = __toESM(require("sleep-promise"));

// src/validateResponse.ts
var errorText = '[react-select-async-paginate] response of "loadOptions" should be an object with "options" prop, which contains array of options.';
var checkIsResponse = (response) => {
  if (!response) {
    return false;
  }
  const {
    options,
    hasMore
  } = response;
  if (!Array.isArray(options)) {
    return false;
  }
  if (typeof hasMore !== "boolean" && typeof hasMore !== "undefined") {
    return false;
  }
  return true;
};
var validateResponse = (response) => {
  if (!checkIsResponse(response)) {
    console.error(errorText, "Received:", response);
    throw new Error(errorText);
  }
  return true;
};

// src/requestOptions.ts
var requestOptions = async (caller, paramsRef, optionsCacheRef, debounceTimeout, setOptionsCache, reduceOptions) => {
  const currentInputValue = paramsRef.current.inputValue;
  const isCacheEmpty = !optionsCacheRef.current[currentInputValue];
  const currentOptions = isCacheEmpty ? getInitialCache(paramsRef.current) : optionsCacheRef.current[currentInputValue];
  if (currentOptions.isLoading || !currentOptions.hasMore) {
    return;
  }
  setOptionsCache((prevOptionsCache) => ({
    ...prevOptionsCache,
    [currentInputValue]: {
      ...currentOptions,
      isLoading: true
    }
  }));
  if (debounceTimeout > 0 && caller === "input-change") {
    await (0, import_sleep_promise.default)(debounceTimeout);
    const newInputValue = paramsRef.current.inputValue;
    if (currentInputValue !== newInputValue) {
      setOptionsCache((prevOptionsCache) => {
        if (isCacheEmpty) {
          const {
            [currentInputValue]: itemForDelete,
            ...restCache
          } = prevOptionsCache;
          return restCache;
        }
        return {
          ...prevOptionsCache,
          [currentInputValue]: {
            ...currentOptions,
            isLoading: false
          }
        };
      });
      return;
    }
  }
  let response;
  let hasError = false;
  try {
    const {
      loadOptions
    } = paramsRef.current;
    response = await loadOptions(
      currentInputValue,
      currentOptions.options,
      currentOptions.additional
    );
  } catch (e) {
    hasError = true;
  }
  if (hasError) {
    setOptionsCache((prevOptionsCache) => ({
      ...prevOptionsCache,
      [currentInputValue]: {
        ...currentOptions,
        isLoading: false
      }
    }));
    return;
  }
  if (validateResponse(response)) {
    const {
      options,
      hasMore
    } = response;
    const newAdditional = response.hasOwnProperty("additional") ? response.additional : currentOptions.additional;
    setOptionsCache((prevOptionsCache) => ({
      ...prevOptionsCache,
      [currentInputValue]: {
        ...currentOptions,
        options: reduceOptions(currentOptions.options, options, newAdditional),
        hasMore: !!hasMore,
        isLoading: false,
        isFirstLoad: false,
        additional: newAdditional
      }
    }));
  }
};

// src/useAsyncPaginateBase.ts
var increaseStateId = (prevStateId) => prevStateId + 1;
var useAsyncPaginateBase = (params, deps = []) => {
  const {
    defaultOptions,
    loadOptionsOnMenuOpen = true,
    debounceTimeout = 0,
    inputValue,
    menuIsOpen,
    filterOption = null,
    reduceOptions = defaultReduceOptions,
    shouldLoadMore = defaultShouldLoadMore
  } = params;
  const isMountedRef = (0, import_use_is_mounted_ref.default)();
  const isInitRef = (0, import_react.useRef)(true);
  const paramsRef = (0, import_react.useRef)(params);
  paramsRef.current = params;
  const setStateId = (0, import_react.useState)(0)[1];
  const optionsCacheRef = (0, import_use_lazy_ref.useLazyRef)(() => getInitialOptionsCache(params));
  const callRequestOptions = (0, import_react.useCallback)((caller) => {
    requestOptions(
      caller,
      paramsRef,
      optionsCacheRef,
      debounceTimeout,
      (reduceState) => {
        optionsCacheRef.current = reduceState(optionsCacheRef.current);
        if (isMountedRef.current) {
          setStateId(increaseStateId);
        }
      },
      reduceOptions
    );
  }, [debounceTimeout]);
  const handleScrolledToBottom = (0, import_react.useCallback)(() => {
    const currentInputValue = paramsRef.current.inputValue;
    const currentOptions2 = optionsCacheRef.current[currentInputValue];
    if (currentOptions2) {
      callRequestOptions("menu-scroll");
    }
  }, [callRequestOptions]);
  (0, import_react.useEffect)(() => {
    if (isInitRef.current) {
      isInitRef.current = false;
    } else {
      optionsCacheRef.current = {};
      setStateId(increaseStateId);
    }
    if (defaultOptions === true) {
      callRequestOptions("autoload");
    }
  }, deps);
  (0, import_react.useEffect)(() => {
    if (menuIsOpen && !optionsCacheRef.current[inputValue]) {
      callRequestOptions("input-change");
    }
  }, [inputValue]);
  (0, import_react.useEffect)(() => {
    if (menuIsOpen && !optionsCacheRef.current[""] && loadOptionsOnMenuOpen) {
      callRequestOptions("menu-toggle");
    }
  }, [menuIsOpen]);
  const currentOptions = optionsCacheRef.current[inputValue] || getInitialCache(params);
  return {
    handleScrolledToBottom,
    shouldLoadMore,
    filterOption,
    isLoading: currentOptions.isLoading,
    isFirstLoad: currentOptions.isFirstLoad,
    options: currentOptions.options
  };
};

// src/useAsyncPaginate.ts
var useAsyncPaginate = (params, deps = []) => {
  const {
    inputValue: inputValueParam,
    menuIsOpen: menuIsOpenParam,
    defaultInputValue: defaultInputValueParam,
    defaultMenuIsOpen: defaultMenuIsOpenParam,
    onInputChange: onInputChangeParam,
    onMenuClose: onMenuCloseParam,
    onMenuOpen: onMenuOpenParam
  } = params;
  const [inputValueState, setInputValue] = (0, import_react2.useState)(
    defaultInputValueParam || ""
  );
  const [menuIsOpenState, setMenuIsOpen] = (0, import_react2.useState)(
    !!defaultMenuIsOpenParam
  );
  const inputValue = typeof inputValueParam === "string" ? inputValueParam : inputValueState;
  const menuIsOpen = typeof menuIsOpenParam === "boolean" ? menuIsOpenParam : menuIsOpenState;
  const onInputChange = (0, import_react2.useCallback)((nextInputValue, actionMeta) => {
    if (onInputChangeParam) {
      onInputChangeParam(nextInputValue, actionMeta);
    }
    setInputValue(nextInputValue);
  }, [onInputChangeParam]);
  const onMenuClose = (0, import_react2.useCallback)(() => {
    if (onMenuCloseParam) {
      onMenuCloseParam();
    }
    setMenuIsOpen(false);
  }, [onMenuCloseParam]);
  const onMenuOpen = (0, import_react2.useCallback)(() => {
    if (onMenuOpenParam) {
      onMenuOpenParam();
    }
    setMenuIsOpen(true);
  }, [onMenuOpenParam]);
  const baseResult = useAsyncPaginateBase(
    {
      ...params,
      inputValue,
      menuIsOpen
    },
    deps
  );
  return {
    ...baseResult,
    inputValue,
    menuIsOpen,
    onInputChange,
    onMenuClose,
    onMenuOpen
  };
};

// src/useComponents.ts
var import_react4 = require("react");
var import_react_select = require("react-select");

// src/wrapMenuList.tsx
var import_react3 = require("react");
var import_compose_react_refs = __toESM(require("@seznam/compose-react-refs"));
var import_jsx_runtime = require("react/jsx-runtime");
var CHECK_TIMEOUT = 300;
function wrapMenuList(MenuList2) {
  function WrappedMenuList(props) {
    const {
      selectProps,
      innerRef
    } = props;
    const {
      handleScrolledToBottom,
      shouldLoadMore
    } = selectProps;
    const checkTimeoutRef = (0, import_react3.useRef)();
    const menuListRef = (0, import_react3.useRef)(null);
    const shouldHandle = (0, import_react3.useCallback)(() => {
      const el = menuListRef.current;
      if (!el) {
        return false;
      }
      const {
        scrollTop,
        scrollHeight,
        clientHeight
      } = el;
      return shouldLoadMore(scrollHeight, clientHeight, scrollTop);
    }, [shouldLoadMore]);
    const checkAndHandle = (0, import_react3.useCallback)(() => {
      if (shouldHandle()) {
        if (handleScrolledToBottom) {
          handleScrolledToBottom();
        }
      }
    }, [shouldHandle, handleScrolledToBottom]);
    const setCheckAndHandleTimeout = (0, import_react3.useCallback)(() => {
      checkAndHandle();
      checkTimeoutRef.current = setTimeout(setCheckAndHandleTimeout, CHECK_TIMEOUT);
    }, [checkAndHandle]);
    (0, import_react3.useEffect)(() => {
      setCheckAndHandleTimeout();
      return () => {
        if (checkTimeoutRef.current) {
          clearTimeout(checkTimeoutRef.current);
        }
      };
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(MenuList2, {
      ...props,
      innerRef: (0, import_compose_react_refs.default)(innerRef, menuListRef)
    });
  }
  return WrappedMenuList;
}

// src/useComponents.ts
var MenuList = wrapMenuList(import_react_select.components.MenuList);
var useComponents = (components) => (0, import_react4.useMemo)(() => ({
  MenuList,
  ...components
}), [components]);

// src/withAsyncPaginate.tsx
var import_jsx_runtime2 = require("react/jsx-runtime");
function withAsyncPaginate(SelectComponent) {
  function WithAsyncPaginate(props) {
    const {
      components,
      selectRef,
      isLoading: isLoadingProp,
      cacheUniqs,
      ...rest
    } = props;
    const asyncPaginateProps = useAsyncPaginate(
      rest,
      cacheUniqs
    );
    const processedComponents = useComponents(components);
    const isLoading = typeof isLoadingProp === "boolean" ? isLoadingProp : asyncPaginateProps.isLoading;
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(SelectComponent, {
      ...props,
      ...asyncPaginateProps,
      isLoading,
      components: processedComponents,
      ref: selectRef
    });
  }
  WithAsyncPaginate.defaultProps = {
    selectRef: null,
    cacheUniqs: [],
    components: {}
  };
  return WithAsyncPaginate;
}

// src/reduceGroupedOptions.ts
var checkGroup = (group) => {
  if (!group) {
    return false;
  }
  const {
    label,
    options
  } = group;
  if (typeof label !== "string" && typeof label !== "undefined") {
    return false;
  }
  if (!Array.isArray(options)) {
    return false;
  }
  return true;
};
var reduceGroupedOptions = (prevOptions, loadedOptions) => {
  const res = prevOptions.slice();
  const mapLabelToIndex = {};
  let prevOptionsIndex = 0;
  const prevOptionsLength = prevOptions.length;
  loadedOptions.forEach((optionOrGroup) => {
    const group = checkGroup(optionOrGroup) ? optionOrGroup : {
      options: [optionOrGroup]
    };
    const {
      label = ""
    } = group;
    let groupIndex = mapLabelToIndex[label];
    if (typeof groupIndex !== "number") {
      for (; prevOptionsIndex < prevOptionsLength && typeof mapLabelToIndex[label] !== "number"; ++prevOptionsIndex) {
        const prevGroup = prevOptions[prevOptionsIndex];
        if (checkGroup(prevGroup)) {
          mapLabelToIndex[prevGroup.label || ""] = prevOptionsIndex;
        }
      }
      groupIndex = mapLabelToIndex[label];
    }
    if (typeof groupIndex !== "number") {
      mapLabelToIndex[label] = res.length;
      res.push(group);
      return;
    }
    res[groupIndex] = {
      ...res[groupIndex],
      options: [...res[groupIndex].options, ...group.options]
    };
  });
  return res;
};

// src/index.ts
var AsyncPaginate = withAsyncPaginate(import_react_select2.default);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AsyncPaginate,
  checkIsResponse,
  reduceGroupedOptions,
  useAsyncPaginate,
  useAsyncPaginateBase,
  useComponents,
  validateResponse,
  withAsyncPaginate,
  wrapMenuList
});
//# sourceMappingURL=index.js.map