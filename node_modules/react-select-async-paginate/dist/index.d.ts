import { Ref, ReactElement } from 'react';
import { GroupBase, OptionsOrGroups, InputActionMeta, SelectInstance, Props, MenuListProps } from 'react-select';

declare type RequestOptionsCallerType = 'autoload' | 'menu-toggle' | 'input-change' | 'menu-scroll';
declare type ReduceOptions<OptionType, Group extends GroupBase<OptionType>, Additional> = (prevOptions: OptionsOrGroups<OptionType, Group>, loadedOptions: OptionsOrGroups<OptionType, Group>, additional: Additional | undefined) => OptionsOrGroups<OptionType, Group>;
declare type OptionsCacheItem<OptionType, Group extends GroupBase<OptionType>, Additional> = {
    isFirstLoad: boolean;
    isLoading: boolean;
    options: OptionsOrGroups<OptionType, Group>;
    hasMore: boolean;
    additional?: Additional;
};
declare type OptionsCache<OptionType, Group extends GroupBase<OptionType>, Additional> = {
    [key: string]: OptionsCacheItem<OptionType, Group, Additional>;
};
declare type ShouldLoadMore = (scrollHeight: number, clientHeight: number, scrollTop: number) => boolean;
declare type Response<OptionType, Group extends GroupBase<OptionType>, Additional> = {
    options: OptionsOrGroups<OptionType, Group>;
    hasMore?: boolean;
    additional?: Additional;
};
declare type LoadOptions<OptionType, Group extends GroupBase<OptionType>, Additional> = (inputValue: string, options: OptionsOrGroups<OptionType, Group>, additional?: Additional) => Response<OptionType, Group, Additional> | Promise<Response<OptionType, Group, Additional>>;
declare type FilterOption = ((option: any, rawInput: string) => boolean) | null;
declare type UseAsyncPaginateBaseResult<OptionType, Group extends GroupBase<OptionType>> = {
    handleScrolledToBottom: () => void;
    shouldLoadMore: ShouldLoadMore;
    isLoading: boolean;
    isFirstLoad: boolean;
    options: OptionsOrGroups<OptionType, Group>;
    filterOption: FilterOption;
};
declare type UseAsyncPaginateResult<OptionType, Group extends GroupBase<OptionType>> = UseAsyncPaginateBaseResult<OptionType, Group> & {
    inputValue: string;
    menuIsOpen: boolean;
    onInputChange: (inputValue: string, actionMeta: InputActionMeta) => void;
    onMenuClose: () => void;
    onMenuOpen: () => void;
};
declare type UseAsyncPaginateParams<OptionType, Group extends GroupBase<OptionType>, Additional> = {
    loadOptions: LoadOptions<OptionType, Group, Additional>;
    options?: OptionsOrGroups<OptionType, Group>;
    defaultOptions?: boolean | OptionsOrGroups<OptionType, Group>;
    additional?: Additional;
    defaultAdditional?: Additional;
    loadOptionsOnMenuOpen?: boolean;
    debounceTimeout?: number;
    reduceOptions?: ReduceOptions<OptionType, Group, Additional>;
    shouldLoadMore?: ShouldLoadMore;
    filterOption?: FilterOption;
    inputValue?: string;
    menuIsOpen?: boolean;
    defaultInputValue?: string;
    defaultMenuIsOpen?: boolean;
    onInputChange?: (newValue: string, actionMeta: InputActionMeta) => void;
    onMenuClose?: () => void;
    onMenuOpen?: () => void;
};
declare type UseAsyncPaginateBaseParams<OptionType, Group extends GroupBase<OptionType>, Additional> = UseAsyncPaginateParams<OptionType, Group, Additional> & {
    inputValue: string;
    menuIsOpen: boolean;
};
declare type ComponentProps<OptionType, Group extends GroupBase<OptionType>, IsMulti extends boolean> = {
    selectRef?: Ref<SelectInstance<OptionType, IsMulti, Group>>;
    cacheUniqs?: ReadonlyArray<any>;
};
declare type AsyncPaginateProps<OptionType, Group extends GroupBase<OptionType>, Additional, IsMulti extends boolean> = Props<OptionType, IsMulti, Group> & UseAsyncPaginateParams<OptionType, Group, Additional> & ComponentProps<OptionType, Group, IsMulti>;
declare type WithAsyncPaginateType = <OptionType, Group extends GroupBase<OptionType>, Additional, IsMulti extends boolean = false>(props: AsyncPaginateProps<OptionType, Group, Additional, IsMulti>) => ReactElement;

declare type SelectComponentType = <Option = unknown, IsMulti extends boolean = boolean, Group extends GroupBase<Option> = GroupBase<Option>>(props: Props<Option, IsMulti, Group> & {
    ref?: Ref<SelectInstance<Option, IsMulti, Group>>;
}) => ReactElement;
declare function withAsyncPaginate(SelectComponent: SelectComponentType): WithAsyncPaginateType;

declare type MenuListType<Option = unknown, IsMulti extends boolean = boolean, Group extends GroupBase<Option> = GroupBase<Option>> = (props: MenuListProps<Option, IsMulti, Group>) => ReactElement;
declare function wrapMenuList<Option = unknown, IsMulti extends boolean = boolean, Group extends GroupBase<Option> = GroupBase<Option>>(MenuList: MenuListType<Option, IsMulti, Group>): (props: MenuListProps<Option, IsMulti, Group>) => JSX.Element;

declare const reduceGroupedOptions: <OptionType, Group extends GroupBase<OptionType>>(prevOptions: OptionsOrGroups<OptionType, Group>, loadedOptions: OptionsOrGroups<OptionType, Group>) => OptionsOrGroups<OptionType, Group>;

declare const checkIsResponse: <OptionType, Group extends GroupBase<OptionType>, Additional>(response: unknown) => response is Response<OptionType, Group, Additional>;
declare const validateResponse: <OptionType, Group extends GroupBase<OptionType>, Additional>(response: unknown) => response is Response<OptionType, Group, Additional>;

declare const useAsyncPaginateBase: <OptionType, Group extends GroupBase<OptionType>, Additional>(params: UseAsyncPaginateBaseParams<OptionType, Group, Additional>, deps?: ReadonlyArray<any>) => UseAsyncPaginateBaseResult<OptionType, Group>;

declare const useAsyncPaginate: <OptionType, Group extends GroupBase<OptionType>, Additional>(params: UseAsyncPaginateParams<OptionType, Group, Additional>, deps?: ReadonlyArray<unknown>) => UseAsyncPaginateResult<OptionType, Group>;

declare type SelectComponentsConfig<OptionType, IsMulti extends boolean, Group extends GroupBase<OptionType>> = Partial<Props<OptionType, IsMulti, Group>['components']>;
declare const useComponents: <OptionType, Group extends GroupBase<OptionType>, IsMulti extends boolean>(components: SelectComponentsConfig<OptionType, IsMulti, Group>) => SelectComponentsConfig<OptionType, IsMulti, Group>;

declare const AsyncPaginate: WithAsyncPaginateType;

export { AsyncPaginate, AsyncPaginateProps, ComponentProps, FilterOption, LoadOptions, OptionsCache, OptionsCacheItem, ReduceOptions, RequestOptionsCallerType, Response, ShouldLoadMore, UseAsyncPaginateBaseParams, UseAsyncPaginateBaseResult, UseAsyncPaginateParams, UseAsyncPaginateResult, WithAsyncPaginateType, checkIsResponse, reduceGroupedOptions, useAsyncPaginate, useAsyncPaginateBase, useComponents, validateResponse, withAsyncPaginate, wrapMenuList };
